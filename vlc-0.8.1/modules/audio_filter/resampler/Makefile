# Makefile.in generated by automake 1.7.9 from Makefile.am.
# modules/audio_filter/resampler/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# Autogenerated by bootstrap - DO NOT EDIT - edit Modules.am instead

srcdir = .
top_srcdir = ../../..

pkgdatadir = $(datadir)/vlc
pkglibdir = $(libdir)/vlc
pkgincludedir = $(includedir)/vlc
top_builddir = ../../..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = ../../../autotools/install-sh -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = mipsel-unknown-linux-gnu
host_triplet = mipsel-unknown-linux-gnu
target_triplet = mipsel-unknown-linux-gnu
ACLOCAL = ${SHELL} /mnt/smb/terra/video/New/Develop/src/vlc-0.8.1/autotools/missing --run aclocal-1.7
ALIASES = 
ALLOCA = 
ALL_LINGUAS = da de en_GB es fr hu it ja nl no pl pt_BR ru sv
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /mnt/smb/terra/video/New/Develop/src/vlc-0.8.1/autotools/missing --run tar
AR = ar
ARCH = mipsel
ARTS_CONFIG = 
ASM = 
AUTOCONF = ${SHELL} /mnt/smb/terra/video/New/Develop/src/vlc-0.8.1/autotools/missing --run autoconf
AUTOHEADER = ${SHELL} /mnt/smb/terra/video/New/Develop/src/vlc-0.8.1/autotools/missing --run autoheader
AUTOMAKE = ${SHELL} /mnt/smb/terra/video/New/Develop/src/vlc-0.8.1/autotools/missing --run automake-1.7
AWK = gawk
BUILD_DIRENT_FALSE = 
BUILD_DIRENT_TRUE = #
BUILD_GETOPT_FALSE = 
BUILD_GETOPT_TRUE = #
BUILD_INCLUDED_LIBINTL = no
BUILD_INTL_FALSE = 
BUILD_INTL_TRUE = #
BUILD_MOZILLA_FALSE = 
BUILD_MOZILLA_TRUE = #
CACA_CONFIG = 
CATOBJEXT = .gmo
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -Wsign-compare -Wall -I/usr/tools/roku/include -I/usr/include -I/usr/local/include -I/usr/local/include/roku -pipe
CORBA_CFLAGS = 
CORBA_LIBS = 
CPP = gcc -E
CPPFLAGS =  -DSYS_LINUX -I$(top_srcdir)/include
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Wsign-compare -Wsign-compare -Wall -I/usr/tools/roku/include -I/usr/include -I/usr/local/include -I/usr/local/include/roku -pipe
CYGPATH = 
CYGPATH_W = echo
DATADIRNAME = share
DATA_PATH = /share/vlc
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DVDNAV_CONFIG = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
ENABLE_CORBA_FALSE = 
ENABLE_CORBA_TRUE = #
ESD_CONFIG = 
EXEEXT = 
FFMPEG_CONFIG = 
FREETYPE_CONFIG = 
FRIBIDI_CONFIG = 
GENCAT = gencat
GLIBC21 = yes
GMSGFMT = /usr/bin/msgfmt
GTK2_CFLAGS = 
GTK2_LIBS = 
HAL_CFLAGS = 
HAL_LIBS = 
HAVE_BEOS_FALSE = 
HAVE_BEOS_TRUE = #
HAVE_BUILTINS_FALSE = #
HAVE_BUILTINS_TRUE = 
HAVE_DARWIN_FALSE = 
HAVE_DARWIN_TRUE = #
HAVE_PLUGINS_FALSE = 
HAVE_PLUGINS_TRUE = #
HAVE_WIN32_FALSE = 
HAVE_WIN32_TRUE = #
INCLUDES = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
INSTOBJEXT = .mo
INTLBISON = bison
INTLLIBS = 
INTLOBJS = 
INTL_LIBTOOL_SUFFIX_PREFIX = 
LD = ld
LDFLAGS = -L/usr/tools/roku/mipsel-linux/lib -L/lib -L/usr/local/lib -Wl,-rpath-link -Wl,/usr/local/lib
LIBCDDB_CFLAGS = 
LIBCDDB_LIBS = 
LIBCDIO_CFLAGS = 
LIBCDIO_LIBS = 
LIBEXT = .so
LIBGNUTLS_CONFIG = 
LIBICONV = 
LIBINTL = 
LIBOBJS = 
LIBS = 
LTLIBICONV = 
LTLIBINTL = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /mnt/smb/terra/video/New/Develop/src/vlc-0.8.1/autotools/missing --run makeinfo
MKINSTALLDIRS = autotools/mkinstalldirs
MOC = 
MOZILLA_CONFIG = 
MSGFMT = /usr/bin/msgfmt
MSGMERGE = :
OBJC = g++
OBJCDEPMODE = depmode=gcc3
OBJCFLAGS = -Wsign-compare -Wall  -pipe
OBJEXT = o
PACKAGE = vlc
PACKAGE_BUGREPORT = 
PACKAGE_NAME = vlc
PACKAGE_STRING = vlc 0.8.1
PACKAGE_TARNAME = vlc
PACKAGE_VERSION = 0.8.1
PATH_SEPARATOR = :
PKG_CONFIG = no
PLUGIN_PATH = /lib/vlc
POSUB = po
RANLIB = ranlib
SDL11_CONFIG = 
SDL12_CONFIG = 
SDL_CONFIG = 
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
SVG_CFLAGS = 
SVG_LIBS = 
SYS = linux
UNTRUE_FALSE = 
UNTRUE_TRUE = #
USE_INCLUDED_LIBINTL = no
USE_NLS = yes
VERSION = 0.8.1
VLC_CONFIG = top_builddir="$(top_builddir)" $(top_builddir)/vlc-config
WINDRES = 
WX_CONFIG = 
XGETTEXT = : --keyword=_NS --keyword=_ANS
XML2_CONFIG = 
XPIDL = /usr/lib/mozilla/xpidl
XPIDL_INCL = 
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_CYGPATH = 
ac_ct_LD = ld
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
ac_ct_WINDRES = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__fastdepOBJC_FALSE = #
am__fastdepOBJC_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
bindir = ${exec_prefix}/bin
build = mipsel-unknown-linux-gnu
build_alias = 
build_cpu = mipsel
build_os = linux-gnu
build_vendor = unknown
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = mipsel-unknown-linux-gnu
host_alias = 
host_cpu = mipsel
host_os = linux-gnu
host_vendor = unknown
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /mnt/smb/terra/video/New/Develop/src/vlc-0.8.1/autotools/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
prefix = /usr
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = mipsel-unknown-linux-gnu
target_alias = 
target_cpu = mipsel
target_os = linux-gnu
target_vendor = unknown

NULL = 

libvlc_LIBRARIES = $(Ltrivial_resamplerb) $(Ltrivial_resamplerpic) $(Lugly_resamplerb) $(Lugly_resamplerpic) $(Llinear_resamplerb) $(Llinear_resamplerpic) $(Lbandlimited_resamplerb) $(Lbandlimited_resamplerpic) $(Lcoreaudio_resamplerb) $(Lcoreaudio_resamplerpic)
noinst_LIBRARIES = $(Ltrivial_resamplerp) $(Lugly_resamplerp) $(Llinear_resamplerp) $(Lbandlimited_resamplerp) $(Lcoreaudio_resamplerp)
noinst_HEADERS = 
EXTRA_DIST = Modules.am
BUILT_SOURCES = 
SUBDIRS = 
#DIST_SUBDIRS = $(SUBDIRS)
libvlcdir = $(libdir)/vlc/audio_filter
SOURCES_trivial_resampler = trivial.c
SOURCES_ugly_resampler = ugly.c
SOURCES_linear_resampler = linear.c
SOURCES_bandlimited_resampler = bandlimited.c bandlimited.h
SOURCES_coreaudio_resampler = coreaudio.c

# There's no need for pic code on win32 so get rid of this to substantially
# reduce the compilation time.
##pic = no
pic = no


# The trivial_resampler plugin
#Ltrivial_resamplerp = libtrivial_resampler_plugin.a
#Dtrivial_resamplerp = libtrivial_resampler_plugin$(LIBEXT)
#Ltrivial_resamplerb = libtrivial_resampler.a
#Ltrivial_resamplerpic = libtrivial_resampler_pic.a

libtrivial_resampler_plugin_a_SOURCES = $(SOURCES_trivial_resampler)
libtrivial_resampler_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin trivial_resampler`
libtrivial_resampler_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin trivial_resampler`
libtrivial_resampler_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin trivial_resampler`

libtrivial_resampler_pic_a_SOURCES = $(SOURCES_trivial_resampler)
libtrivial_resampler_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic trivial_resampler`
libtrivial_resampler_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic trivial_resampler`
libtrivial_resampler_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic trivial_resampler`

libtrivial_resampler_a_SOURCES = $(SOURCES_trivial_resampler)
libtrivial_resampler_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin trivial_resampler`
libtrivial_resampler_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin trivial_resampler`
libtrivial_resampler_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin trivial_resampler`
libtrivial_resampler_DATA = $(Dtrivial_resamplerp)

libtrivial_resamplerdir = $(libdir)/vlc/


# The ugly_resampler plugin
#Lugly_resamplerp = libugly_resampler_plugin.a
#Dugly_resamplerp = libugly_resampler_plugin$(LIBEXT)
#Lugly_resamplerb = libugly_resampler.a
#Lugly_resamplerpic = libugly_resampler_pic.a

libugly_resampler_plugin_a_SOURCES = $(SOURCES_ugly_resampler)
libugly_resampler_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin ugly_resampler`
libugly_resampler_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin ugly_resampler`
libugly_resampler_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin ugly_resampler`

libugly_resampler_pic_a_SOURCES = $(SOURCES_ugly_resampler)
libugly_resampler_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic ugly_resampler`
libugly_resampler_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic ugly_resampler`
libugly_resampler_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic ugly_resampler`

libugly_resampler_a_SOURCES = $(SOURCES_ugly_resampler)
libugly_resampler_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin ugly_resampler`
libugly_resampler_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin ugly_resampler`
libugly_resampler_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin ugly_resampler`
libugly_resampler_DATA = $(Dugly_resamplerp)

libugly_resamplerdir = $(libdir)/vlc/


# The linear_resampler plugin
#Llinear_resamplerp = liblinear_resampler_plugin.a
#Dlinear_resamplerp = liblinear_resampler_plugin$(LIBEXT)
#Llinear_resamplerb = liblinear_resampler.a
#Llinear_resamplerpic = liblinear_resampler_pic.a

liblinear_resampler_plugin_a_SOURCES = $(SOURCES_linear_resampler)
liblinear_resampler_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin linear_resampler`
liblinear_resampler_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin linear_resampler`
liblinear_resampler_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin linear_resampler`

liblinear_resampler_pic_a_SOURCES = $(SOURCES_linear_resampler)
liblinear_resampler_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic linear_resampler`
liblinear_resampler_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic linear_resampler`
liblinear_resampler_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic linear_resampler`

liblinear_resampler_a_SOURCES = $(SOURCES_linear_resampler)
liblinear_resampler_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin linear_resampler`
liblinear_resampler_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin linear_resampler`
liblinear_resampler_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin linear_resampler`
liblinear_resampler_DATA = $(Dlinear_resamplerp)

liblinear_resamplerdir = $(libdir)/vlc/


# The bandlimited_resampler plugin
#Lbandlimited_resamplerp = libbandlimited_resampler_plugin.a
#Dbandlimited_resamplerp = libbandlimited_resampler_plugin$(LIBEXT)
#Lbandlimited_resamplerb = libbandlimited_resampler.a
#Lbandlimited_resamplerpic = libbandlimited_resampler_pic.a

libbandlimited_resampler_plugin_a_SOURCES = $(SOURCES_bandlimited_resampler)
libbandlimited_resampler_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin bandlimited_resampler`
libbandlimited_resampler_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin bandlimited_resampler`
libbandlimited_resampler_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin bandlimited_resampler`

libbandlimited_resampler_pic_a_SOURCES = $(SOURCES_bandlimited_resampler)
libbandlimited_resampler_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic bandlimited_resampler`
libbandlimited_resampler_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic bandlimited_resampler`
libbandlimited_resampler_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic bandlimited_resampler`

libbandlimited_resampler_a_SOURCES = $(SOURCES_bandlimited_resampler)
libbandlimited_resampler_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin bandlimited_resampler`
libbandlimited_resampler_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin bandlimited_resampler`
libbandlimited_resampler_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin bandlimited_resampler`
libbandlimited_resampler_DATA = $(Dbandlimited_resamplerp)

libbandlimited_resamplerdir = $(libdir)/vlc/


# The coreaudio_resampler plugin
#Lcoreaudio_resamplerp = libcoreaudio_resampler_plugin.a
#Dcoreaudio_resamplerp = libcoreaudio_resampler_plugin$(LIBEXT)
#Lcoreaudio_resamplerb = libcoreaudio_resampler.a
#Lcoreaudio_resamplerpic = libcoreaudio_resampler_pic.a

libcoreaudio_resampler_plugin_a_SOURCES = $(SOURCES_coreaudio_resampler)
libcoreaudio_resampler_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin coreaudio_resampler`
libcoreaudio_resampler_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin coreaudio_resampler`
libcoreaudio_resampler_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin coreaudio_resampler`

libcoreaudio_resampler_pic_a_SOURCES = $(SOURCES_coreaudio_resampler)
libcoreaudio_resampler_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic coreaudio_resampler`
libcoreaudio_resampler_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic coreaudio_resampler`
libcoreaudio_resampler_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic coreaudio_resampler`

libcoreaudio_resampler_a_SOURCES = $(SOURCES_coreaudio_resampler)
libcoreaudio_resampler_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin coreaudio_resampler`
libcoreaudio_resampler_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin coreaudio_resampler`
libcoreaudio_resampler_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin coreaudio_resampler`
libcoreaudio_resampler_DATA = $(Dcoreaudio_resamplerp)

libcoreaudio_resamplerdir = $(libdir)/vlc/
subdir = modules/audio_filter/resampler
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/autotools/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LIBRARIES = $(libvlc_LIBRARIES) $(noinst_LIBRARIES)

libbandlimited_resampler_a_AR = $(AR) cru
libbandlimited_resampler_a_LIBADD =
am__objects_1 = libbandlimited_resampler_a-bandlimited.$(OBJEXT)
am_libbandlimited_resampler_a_OBJECTS = $(am__objects_1)
libbandlimited_resampler_a_OBJECTS = \
	$(am_libbandlimited_resampler_a_OBJECTS)
libbandlimited_resampler_pic_a_AR = $(AR) cru
libbandlimited_resampler_pic_a_LIBADD =
am__objects_2 = libbandlimited_resampler_pic_a-bandlimited.$(OBJEXT)
am_libbandlimited_resampler_pic_a_OBJECTS = $(am__objects_2)
libbandlimited_resampler_pic_a_OBJECTS = \
	$(am_libbandlimited_resampler_pic_a_OBJECTS)
libbandlimited_resampler_plugin_a_AR = $(AR) cru
libbandlimited_resampler_plugin_a_LIBADD =
am__objects_3 = libbandlimited_resampler_plugin_a-bandlimited.$(OBJEXT)
am_libbandlimited_resampler_plugin_a_OBJECTS = $(am__objects_3)
libbandlimited_resampler_plugin_a_OBJECTS = \
	$(am_libbandlimited_resampler_plugin_a_OBJECTS)
libcoreaudio_resampler_a_AR = $(AR) cru
libcoreaudio_resampler_a_LIBADD =
am__objects_4 = libcoreaudio_resampler_a-coreaudio.$(OBJEXT)
am_libcoreaudio_resampler_a_OBJECTS = $(am__objects_4)
libcoreaudio_resampler_a_OBJECTS = \
	$(am_libcoreaudio_resampler_a_OBJECTS)
libcoreaudio_resampler_pic_a_AR = $(AR) cru
libcoreaudio_resampler_pic_a_LIBADD =
am__objects_5 = libcoreaudio_resampler_pic_a-coreaudio.$(OBJEXT)
am_libcoreaudio_resampler_pic_a_OBJECTS = $(am__objects_5)
libcoreaudio_resampler_pic_a_OBJECTS = \
	$(am_libcoreaudio_resampler_pic_a_OBJECTS)
libcoreaudio_resampler_plugin_a_AR = $(AR) cru
libcoreaudio_resampler_plugin_a_LIBADD =
am__objects_6 = libcoreaudio_resampler_plugin_a-coreaudio.$(OBJEXT)
am_libcoreaudio_resampler_plugin_a_OBJECTS = $(am__objects_6)
libcoreaudio_resampler_plugin_a_OBJECTS = \
	$(am_libcoreaudio_resampler_plugin_a_OBJECTS)
liblinear_resampler_a_AR = $(AR) cru
liblinear_resampler_a_LIBADD =
am__objects_7 = liblinear_resampler_a-linear.$(OBJEXT)
am_liblinear_resampler_a_OBJECTS = $(am__objects_7)
liblinear_resampler_a_OBJECTS = $(am_liblinear_resampler_a_OBJECTS)
liblinear_resampler_pic_a_AR = $(AR) cru
liblinear_resampler_pic_a_LIBADD =
am__objects_8 = liblinear_resampler_pic_a-linear.$(OBJEXT)
am_liblinear_resampler_pic_a_OBJECTS = $(am__objects_8)
liblinear_resampler_pic_a_OBJECTS = \
	$(am_liblinear_resampler_pic_a_OBJECTS)
liblinear_resampler_plugin_a_AR = $(AR) cru
liblinear_resampler_plugin_a_LIBADD =
am__objects_9 = liblinear_resampler_plugin_a-linear.$(OBJEXT)
am_liblinear_resampler_plugin_a_OBJECTS = $(am__objects_9)
liblinear_resampler_plugin_a_OBJECTS = \
	$(am_liblinear_resampler_plugin_a_OBJECTS)
libtrivial_resampler_a_AR = $(AR) cru
libtrivial_resampler_a_LIBADD =
am__objects_10 = libtrivial_resampler_a-trivial.$(OBJEXT)
am_libtrivial_resampler_a_OBJECTS = $(am__objects_10)
libtrivial_resampler_a_OBJECTS = $(am_libtrivial_resampler_a_OBJECTS)
libtrivial_resampler_pic_a_AR = $(AR) cru
libtrivial_resampler_pic_a_LIBADD =
am__objects_11 = libtrivial_resampler_pic_a-trivial.$(OBJEXT)
am_libtrivial_resampler_pic_a_OBJECTS = $(am__objects_11)
libtrivial_resampler_pic_a_OBJECTS = \
	$(am_libtrivial_resampler_pic_a_OBJECTS)
libtrivial_resampler_plugin_a_AR = $(AR) cru
libtrivial_resampler_plugin_a_LIBADD =
am__objects_12 = libtrivial_resampler_plugin_a-trivial.$(OBJEXT)
am_libtrivial_resampler_plugin_a_OBJECTS = $(am__objects_12)
libtrivial_resampler_plugin_a_OBJECTS = \
	$(am_libtrivial_resampler_plugin_a_OBJECTS)
libugly_resampler_a_AR = $(AR) cru
libugly_resampler_a_LIBADD =
am__objects_13 = libugly_resampler_a-ugly.$(OBJEXT)
am_libugly_resampler_a_OBJECTS = $(am__objects_13)
libugly_resampler_a_OBJECTS = $(am_libugly_resampler_a_OBJECTS)
libugly_resampler_pic_a_AR = $(AR) cru
libugly_resampler_pic_a_LIBADD =
am__objects_14 = libugly_resampler_pic_a-ugly.$(OBJEXT)
am_libugly_resampler_pic_a_OBJECTS = $(am__objects_14)
libugly_resampler_pic_a_OBJECTS = $(am_libugly_resampler_pic_a_OBJECTS)
libugly_resampler_plugin_a_AR = $(AR) cru
libugly_resampler_plugin_a_LIBADD =
am__objects_15 = libugly_resampler_plugin_a-ugly.$(OBJEXT)
am_libugly_resampler_plugin_a_OBJECTS = $(am__objects_15)
libugly_resampler_plugin_a_OBJECTS = \
	$(am_libugly_resampler_plugin_a_OBJECTS)

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/autotools/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = \
	./$(DEPDIR)/libbandlimited_resampler_a-bandlimited.Po \
	./$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.Po \
	./$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.Po \
	./$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.Po \
	./$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.Po \
	./$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.Po \
	./$(DEPDIR)/liblinear_resampler_a-linear.Po \
	./$(DEPDIR)/liblinear_resampler_pic_a-linear.Po \
	./$(DEPDIR)/liblinear_resampler_plugin_a-linear.Po \
	./$(DEPDIR)/libtrivial_resampler_a-trivial.Po \
	./$(DEPDIR)/libtrivial_resampler_pic_a-trivial.Po \
	./$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.Po \
	./$(DEPDIR)/libugly_resampler_a-ugly.Po \
	./$(DEPDIR)/libugly_resampler_pic_a-ugly.Po \
	./$(DEPDIR)/libugly_resampler_plugin_a-ugly.Po
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(libbandlimited_resampler_a_SOURCES) \
	$(libbandlimited_resampler_pic_a_SOURCES) \
	$(libbandlimited_resampler_plugin_a_SOURCES) \
	$(libcoreaudio_resampler_a_SOURCES) \
	$(libcoreaudio_resampler_pic_a_SOURCES) \
	$(libcoreaudio_resampler_plugin_a_SOURCES) \
	$(liblinear_resampler_a_SOURCES) \
	$(liblinear_resampler_pic_a_SOURCES) \
	$(liblinear_resampler_plugin_a_SOURCES) \
	$(libtrivial_resampler_a_SOURCES) \
	$(libtrivial_resampler_pic_a_SOURCES) \
	$(libtrivial_resampler_plugin_a_SOURCES) \
	$(libugly_resampler_a_SOURCES) \
	$(libugly_resampler_pic_a_SOURCES) \
	$(libugly_resampler_plugin_a_SOURCES)
DATA = $(libbandlimited_resampler_DATA) $(libcoreaudio_resampler_DATA) \
	$(liblinear_resampler_DATA) $(libtrivial_resampler_DATA) \
	$(libugly_resampler_DATA)

HEADERS = $(noinst_HEADERS)


RECURSIVE_TARGETS = info-recursive dvi-recursive pdf-recursive \
	ps-recursive install-info-recursive uninstall-info-recursive \
	all-recursive install-data-recursive install-exec-recursive \
	installdirs-recursive install-recursive uninstall-recursive \
	check-recursive installcheck-recursive
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.in \
	$(srcdir)/Modules.am Makefile.am
DIST_SUBDIRS = $(SUBDIRS)
SOURCES = $(libbandlimited_resampler_a_SOURCES) $(libbandlimited_resampler_pic_a_SOURCES) $(libbandlimited_resampler_plugin_a_SOURCES) $(libcoreaudio_resampler_a_SOURCES) $(libcoreaudio_resampler_pic_a_SOURCES) $(libcoreaudio_resampler_plugin_a_SOURCES) $(liblinear_resampler_a_SOURCES) $(liblinear_resampler_pic_a_SOURCES) $(liblinear_resampler_plugin_a_SOURCES) $(libtrivial_resampler_a_SOURCES) $(libtrivial_resampler_pic_a_SOURCES) $(libtrivial_resampler_plugin_a_SOURCES) $(libugly_resampler_a_SOURCES) $(libugly_resampler_pic_a_SOURCES) $(libugly_resampler_plugin_a_SOURCES)

all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-recursive

.SUFFIXES:
.SUFFIXES: .c .o .obj
$(srcdir)/Makefile.in:  Makefile.am $(srcdir)/Modules.am $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  modules/audio_filter/resampler/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
libvlcLIBRARIES_INSTALL = $(INSTALL_DATA)
install-libvlcLIBRARIES: $(libvlc_LIBRARIES)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libvlcdir)
	@list='$(libvlc_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f="`echo $$p | sed -e 's|^.*/||'`"; \
	    echo " $(libvlcLIBRARIES_INSTALL) $$p $(DESTDIR)$(libvlcdir)/$$f"; \
	    $(libvlcLIBRARIES_INSTALL) $$p $(DESTDIR)$(libvlcdir)/$$f; \
	  else :; fi; \
	done
	@$(POST_INSTALL)
	@list='$(libvlc_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    p="`echo $$p | sed -e 's|^.*/||'`"; \
	    echo " $(RANLIB) $(DESTDIR)$(libvlcdir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(libvlcdir)/$$p; \
	  else :; fi; \
	done

uninstall-libvlcLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(libvlc_LIBRARIES)'; for p in $$list; do \
	  p="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(libvlcdir)/$$p"; \
	  rm -f $(DESTDIR)$(libvlcdir)/$$p; \
	done

clean-libvlcLIBRARIES:
	-test -z "$(libvlc_LIBRARIES)" || rm -f $(libvlc_LIBRARIES)

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
libbandlimited_resampler.a: $(libbandlimited_resampler_a_OBJECTS) $(libbandlimited_resampler_a_DEPENDENCIES) 
	-rm -f libbandlimited_resampler.a
	$(libbandlimited_resampler_a_AR) libbandlimited_resampler.a $(libbandlimited_resampler_a_OBJECTS) $(libbandlimited_resampler_a_LIBADD)
	$(RANLIB) libbandlimited_resampler.a
libbandlimited_resampler_pic.a: $(libbandlimited_resampler_pic_a_OBJECTS) $(libbandlimited_resampler_pic_a_DEPENDENCIES) 
	-rm -f libbandlimited_resampler_pic.a
	$(libbandlimited_resampler_pic_a_AR) libbandlimited_resampler_pic.a $(libbandlimited_resampler_pic_a_OBJECTS) $(libbandlimited_resampler_pic_a_LIBADD)
	$(RANLIB) libbandlimited_resampler_pic.a
libbandlimited_resampler_plugin.a: $(libbandlimited_resampler_plugin_a_OBJECTS) $(libbandlimited_resampler_plugin_a_DEPENDENCIES) 
	-rm -f libbandlimited_resampler_plugin.a
	$(libbandlimited_resampler_plugin_a_AR) libbandlimited_resampler_plugin.a $(libbandlimited_resampler_plugin_a_OBJECTS) $(libbandlimited_resampler_plugin_a_LIBADD)
	$(RANLIB) libbandlimited_resampler_plugin.a
libcoreaudio_resampler.a: $(libcoreaudio_resampler_a_OBJECTS) $(libcoreaudio_resampler_a_DEPENDENCIES) 
	-rm -f libcoreaudio_resampler.a
	$(libcoreaudio_resampler_a_AR) libcoreaudio_resampler.a $(libcoreaudio_resampler_a_OBJECTS) $(libcoreaudio_resampler_a_LIBADD)
	$(RANLIB) libcoreaudio_resampler.a
libcoreaudio_resampler_pic.a: $(libcoreaudio_resampler_pic_a_OBJECTS) $(libcoreaudio_resampler_pic_a_DEPENDENCIES) 
	-rm -f libcoreaudio_resampler_pic.a
	$(libcoreaudio_resampler_pic_a_AR) libcoreaudio_resampler_pic.a $(libcoreaudio_resampler_pic_a_OBJECTS) $(libcoreaudio_resampler_pic_a_LIBADD)
	$(RANLIB) libcoreaudio_resampler_pic.a
libcoreaudio_resampler_plugin.a: $(libcoreaudio_resampler_plugin_a_OBJECTS) $(libcoreaudio_resampler_plugin_a_DEPENDENCIES) 
	-rm -f libcoreaudio_resampler_plugin.a
	$(libcoreaudio_resampler_plugin_a_AR) libcoreaudio_resampler_plugin.a $(libcoreaudio_resampler_plugin_a_OBJECTS) $(libcoreaudio_resampler_plugin_a_LIBADD)
	$(RANLIB) libcoreaudio_resampler_plugin.a
liblinear_resampler.a: $(liblinear_resampler_a_OBJECTS) $(liblinear_resampler_a_DEPENDENCIES) 
	-rm -f liblinear_resampler.a
	$(liblinear_resampler_a_AR) liblinear_resampler.a $(liblinear_resampler_a_OBJECTS) $(liblinear_resampler_a_LIBADD)
	$(RANLIB) liblinear_resampler.a
liblinear_resampler_pic.a: $(liblinear_resampler_pic_a_OBJECTS) $(liblinear_resampler_pic_a_DEPENDENCIES) 
	-rm -f liblinear_resampler_pic.a
	$(liblinear_resampler_pic_a_AR) liblinear_resampler_pic.a $(liblinear_resampler_pic_a_OBJECTS) $(liblinear_resampler_pic_a_LIBADD)
	$(RANLIB) liblinear_resampler_pic.a
liblinear_resampler_plugin.a: $(liblinear_resampler_plugin_a_OBJECTS) $(liblinear_resampler_plugin_a_DEPENDENCIES) 
	-rm -f liblinear_resampler_plugin.a
	$(liblinear_resampler_plugin_a_AR) liblinear_resampler_plugin.a $(liblinear_resampler_plugin_a_OBJECTS) $(liblinear_resampler_plugin_a_LIBADD)
	$(RANLIB) liblinear_resampler_plugin.a
libtrivial_resampler.a: $(libtrivial_resampler_a_OBJECTS) $(libtrivial_resampler_a_DEPENDENCIES) 
	-rm -f libtrivial_resampler.a
	$(libtrivial_resampler_a_AR) libtrivial_resampler.a $(libtrivial_resampler_a_OBJECTS) $(libtrivial_resampler_a_LIBADD)
	$(RANLIB) libtrivial_resampler.a
libtrivial_resampler_pic.a: $(libtrivial_resampler_pic_a_OBJECTS) $(libtrivial_resampler_pic_a_DEPENDENCIES) 
	-rm -f libtrivial_resampler_pic.a
	$(libtrivial_resampler_pic_a_AR) libtrivial_resampler_pic.a $(libtrivial_resampler_pic_a_OBJECTS) $(libtrivial_resampler_pic_a_LIBADD)
	$(RANLIB) libtrivial_resampler_pic.a
libtrivial_resampler_plugin.a: $(libtrivial_resampler_plugin_a_OBJECTS) $(libtrivial_resampler_plugin_a_DEPENDENCIES) 
	-rm -f libtrivial_resampler_plugin.a
	$(libtrivial_resampler_plugin_a_AR) libtrivial_resampler_plugin.a $(libtrivial_resampler_plugin_a_OBJECTS) $(libtrivial_resampler_plugin_a_LIBADD)
	$(RANLIB) libtrivial_resampler_plugin.a
libugly_resampler.a: $(libugly_resampler_a_OBJECTS) $(libugly_resampler_a_DEPENDENCIES) 
	-rm -f libugly_resampler.a
	$(libugly_resampler_a_AR) libugly_resampler.a $(libugly_resampler_a_OBJECTS) $(libugly_resampler_a_LIBADD)
	$(RANLIB) libugly_resampler.a
libugly_resampler_pic.a: $(libugly_resampler_pic_a_OBJECTS) $(libugly_resampler_pic_a_DEPENDENCIES) 
	-rm -f libugly_resampler_pic.a
	$(libugly_resampler_pic_a_AR) libugly_resampler_pic.a $(libugly_resampler_pic_a_OBJECTS) $(libugly_resampler_pic_a_LIBADD)
	$(RANLIB) libugly_resampler_pic.a
libugly_resampler_plugin.a: $(libugly_resampler_plugin_a_OBJECTS) $(libugly_resampler_plugin_a_DEPENDENCIES) 
	-rm -f libugly_resampler_plugin.a
	$(libugly_resampler_plugin_a_AR) libugly_resampler_plugin.a $(libugly_resampler_plugin_a_OBJECTS) $(libugly_resampler_plugin_a_LIBADD)
	$(RANLIB) libugly_resampler_plugin.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/libbandlimited_resampler_a-bandlimited.Po
include ./$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.Po
include ./$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.Po
include ./$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.Po
include ./$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.Po
include ./$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.Po
include ./$(DEPDIR)/liblinear_resampler_a-linear.Po
include ./$(DEPDIR)/liblinear_resampler_pic_a-linear.Po
include ./$(DEPDIR)/liblinear_resampler_plugin_a-linear.Po
include ./$(DEPDIR)/libtrivial_resampler_a-trivial.Po
include ./$(DEPDIR)/libtrivial_resampler_pic_a-trivial.Po
include ./$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.Po
include ./$(DEPDIR)/libugly_resampler_a-ugly.Po
include ./$(DEPDIR)/libugly_resampler_pic_a-ugly.Po
include ./$(DEPDIR)/libugly_resampler_plugin_a-ugly.Po

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

libbandlimited_resampler_a-bandlimited.o: bandlimited.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libbandlimited_resampler_a_CFLAGS) $(CFLAGS) -MT libbandlimited_resampler_a-bandlimited.o -MD -MP -MF "$(DEPDIR)/libbandlimited_resampler_a-bandlimited.Tpo" \
	  -c -o libbandlimited_resampler_a-bandlimited.o `test -f 'bandlimited.c' || echo '$(srcdir)/'`bandlimited.c; \
	then mv -f "$(DEPDIR)/libbandlimited_resampler_a-bandlimited.Tpo" "$(DEPDIR)/libbandlimited_resampler_a-bandlimited.Po"; \
	else rm -f "$(DEPDIR)/libbandlimited_resampler_a-bandlimited.Tpo"; exit 1; \
	fi
#	source='bandlimited.c' object='libbandlimited_resampler_a-bandlimited.o' libtool=no \
#	depfile='$(DEPDIR)/libbandlimited_resampler_a-bandlimited.Po' tmpdepfile='$(DEPDIR)/libbandlimited_resampler_a-bandlimited.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libbandlimited_resampler_a_CFLAGS) $(CFLAGS) -c -o libbandlimited_resampler_a-bandlimited.o `test -f 'bandlimited.c' || echo '$(srcdir)/'`bandlimited.c

libbandlimited_resampler_a-bandlimited.obj: bandlimited.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libbandlimited_resampler_a_CFLAGS) $(CFLAGS) -MT libbandlimited_resampler_a-bandlimited.obj -MD -MP -MF "$(DEPDIR)/libbandlimited_resampler_a-bandlimited.Tpo" \
	  -c -o libbandlimited_resampler_a-bandlimited.obj `if test -f 'bandlimited.c'; then $(CYGPATH_W) 'bandlimited.c'; else $(CYGPATH_W) '$(srcdir)/bandlimited.c'; fi`; \
	then mv -f "$(DEPDIR)/libbandlimited_resampler_a-bandlimited.Tpo" "$(DEPDIR)/libbandlimited_resampler_a-bandlimited.Po"; \
	else rm -f "$(DEPDIR)/libbandlimited_resampler_a-bandlimited.Tpo"; exit 1; \
	fi
#	source='bandlimited.c' object='libbandlimited_resampler_a-bandlimited.obj' libtool=no \
#	depfile='$(DEPDIR)/libbandlimited_resampler_a-bandlimited.Po' tmpdepfile='$(DEPDIR)/libbandlimited_resampler_a-bandlimited.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libbandlimited_resampler_a_CFLAGS) $(CFLAGS) -c -o libbandlimited_resampler_a-bandlimited.obj `if test -f 'bandlimited.c'; then $(CYGPATH_W) 'bandlimited.c'; else $(CYGPATH_W) '$(srcdir)/bandlimited.c'; fi`

libbandlimited_resampler_pic_a-bandlimited.o: bandlimited.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libbandlimited_resampler_pic_a_CFLAGS) $(CFLAGS) -MT libbandlimited_resampler_pic_a-bandlimited.o -MD -MP -MF "$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.Tpo" \
	  -c -o libbandlimited_resampler_pic_a-bandlimited.o `test -f 'bandlimited.c' || echo '$(srcdir)/'`bandlimited.c; \
	then mv -f "$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.Tpo" "$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.Po"; \
	else rm -f "$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.Tpo"; exit 1; \
	fi
#	source='bandlimited.c' object='libbandlimited_resampler_pic_a-bandlimited.o' libtool=no \
#	depfile='$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.Po' tmpdepfile='$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libbandlimited_resampler_pic_a_CFLAGS) $(CFLAGS) -c -o libbandlimited_resampler_pic_a-bandlimited.o `test -f 'bandlimited.c' || echo '$(srcdir)/'`bandlimited.c

libbandlimited_resampler_pic_a-bandlimited.obj: bandlimited.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libbandlimited_resampler_pic_a_CFLAGS) $(CFLAGS) -MT libbandlimited_resampler_pic_a-bandlimited.obj -MD -MP -MF "$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.Tpo" \
	  -c -o libbandlimited_resampler_pic_a-bandlimited.obj `if test -f 'bandlimited.c'; then $(CYGPATH_W) 'bandlimited.c'; else $(CYGPATH_W) '$(srcdir)/bandlimited.c'; fi`; \
	then mv -f "$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.Tpo" "$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.Po"; \
	else rm -f "$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.Tpo"; exit 1; \
	fi
#	source='bandlimited.c' object='libbandlimited_resampler_pic_a-bandlimited.obj' libtool=no \
#	depfile='$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.Po' tmpdepfile='$(DEPDIR)/libbandlimited_resampler_pic_a-bandlimited.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libbandlimited_resampler_pic_a_CFLAGS) $(CFLAGS) -c -o libbandlimited_resampler_pic_a-bandlimited.obj `if test -f 'bandlimited.c'; then $(CYGPATH_W) 'bandlimited.c'; else $(CYGPATH_W) '$(srcdir)/bandlimited.c'; fi`

libbandlimited_resampler_plugin_a-bandlimited.o: bandlimited.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libbandlimited_resampler_plugin_a_CFLAGS) $(CFLAGS) -MT libbandlimited_resampler_plugin_a-bandlimited.o -MD -MP -MF "$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.Tpo" \
	  -c -o libbandlimited_resampler_plugin_a-bandlimited.o `test -f 'bandlimited.c' || echo '$(srcdir)/'`bandlimited.c; \
	then mv -f "$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.Tpo" "$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.Po"; \
	else rm -f "$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.Tpo"; exit 1; \
	fi
#	source='bandlimited.c' object='libbandlimited_resampler_plugin_a-bandlimited.o' libtool=no \
#	depfile='$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.Po' tmpdepfile='$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libbandlimited_resampler_plugin_a_CFLAGS) $(CFLAGS) -c -o libbandlimited_resampler_plugin_a-bandlimited.o `test -f 'bandlimited.c' || echo '$(srcdir)/'`bandlimited.c

libbandlimited_resampler_plugin_a-bandlimited.obj: bandlimited.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libbandlimited_resampler_plugin_a_CFLAGS) $(CFLAGS) -MT libbandlimited_resampler_plugin_a-bandlimited.obj -MD -MP -MF "$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.Tpo" \
	  -c -o libbandlimited_resampler_plugin_a-bandlimited.obj `if test -f 'bandlimited.c'; then $(CYGPATH_W) 'bandlimited.c'; else $(CYGPATH_W) '$(srcdir)/bandlimited.c'; fi`; \
	then mv -f "$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.Tpo" "$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.Po"; \
	else rm -f "$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.Tpo"; exit 1; \
	fi
#	source='bandlimited.c' object='libbandlimited_resampler_plugin_a-bandlimited.obj' libtool=no \
#	depfile='$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.Po' tmpdepfile='$(DEPDIR)/libbandlimited_resampler_plugin_a-bandlimited.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libbandlimited_resampler_plugin_a_CFLAGS) $(CFLAGS) -c -o libbandlimited_resampler_plugin_a-bandlimited.obj `if test -f 'bandlimited.c'; then $(CYGPATH_W) 'bandlimited.c'; else $(CYGPATH_W) '$(srcdir)/bandlimited.c'; fi`

libcoreaudio_resampler_a-coreaudio.o: coreaudio.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcoreaudio_resampler_a_CFLAGS) $(CFLAGS) -MT libcoreaudio_resampler_a-coreaudio.o -MD -MP -MF "$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.Tpo" \
	  -c -o libcoreaudio_resampler_a-coreaudio.o `test -f 'coreaudio.c' || echo '$(srcdir)/'`coreaudio.c; \
	then mv -f "$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.Tpo" "$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.Po"; \
	else rm -f "$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.Tpo"; exit 1; \
	fi
#	source='coreaudio.c' object='libcoreaudio_resampler_a-coreaudio.o' libtool=no \
#	depfile='$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.Po' tmpdepfile='$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcoreaudio_resampler_a_CFLAGS) $(CFLAGS) -c -o libcoreaudio_resampler_a-coreaudio.o `test -f 'coreaudio.c' || echo '$(srcdir)/'`coreaudio.c

libcoreaudio_resampler_a-coreaudio.obj: coreaudio.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcoreaudio_resampler_a_CFLAGS) $(CFLAGS) -MT libcoreaudio_resampler_a-coreaudio.obj -MD -MP -MF "$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.Tpo" \
	  -c -o libcoreaudio_resampler_a-coreaudio.obj `if test -f 'coreaudio.c'; then $(CYGPATH_W) 'coreaudio.c'; else $(CYGPATH_W) '$(srcdir)/coreaudio.c'; fi`; \
	then mv -f "$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.Tpo" "$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.Po"; \
	else rm -f "$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.Tpo"; exit 1; \
	fi
#	source='coreaudio.c' object='libcoreaudio_resampler_a-coreaudio.obj' libtool=no \
#	depfile='$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.Po' tmpdepfile='$(DEPDIR)/libcoreaudio_resampler_a-coreaudio.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcoreaudio_resampler_a_CFLAGS) $(CFLAGS) -c -o libcoreaudio_resampler_a-coreaudio.obj `if test -f 'coreaudio.c'; then $(CYGPATH_W) 'coreaudio.c'; else $(CYGPATH_W) '$(srcdir)/coreaudio.c'; fi`

libcoreaudio_resampler_pic_a-coreaudio.o: coreaudio.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcoreaudio_resampler_pic_a_CFLAGS) $(CFLAGS) -MT libcoreaudio_resampler_pic_a-coreaudio.o -MD -MP -MF "$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.Tpo" \
	  -c -o libcoreaudio_resampler_pic_a-coreaudio.o `test -f 'coreaudio.c' || echo '$(srcdir)/'`coreaudio.c; \
	then mv -f "$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.Tpo" "$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.Po"; \
	else rm -f "$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.Tpo"; exit 1; \
	fi
#	source='coreaudio.c' object='libcoreaudio_resampler_pic_a-coreaudio.o' libtool=no \
#	depfile='$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.Po' tmpdepfile='$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcoreaudio_resampler_pic_a_CFLAGS) $(CFLAGS) -c -o libcoreaudio_resampler_pic_a-coreaudio.o `test -f 'coreaudio.c' || echo '$(srcdir)/'`coreaudio.c

libcoreaudio_resampler_pic_a-coreaudio.obj: coreaudio.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcoreaudio_resampler_pic_a_CFLAGS) $(CFLAGS) -MT libcoreaudio_resampler_pic_a-coreaudio.obj -MD -MP -MF "$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.Tpo" \
	  -c -o libcoreaudio_resampler_pic_a-coreaudio.obj `if test -f 'coreaudio.c'; then $(CYGPATH_W) 'coreaudio.c'; else $(CYGPATH_W) '$(srcdir)/coreaudio.c'; fi`; \
	then mv -f "$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.Tpo" "$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.Po"; \
	else rm -f "$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.Tpo"; exit 1; \
	fi
#	source='coreaudio.c' object='libcoreaudio_resampler_pic_a-coreaudio.obj' libtool=no \
#	depfile='$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.Po' tmpdepfile='$(DEPDIR)/libcoreaudio_resampler_pic_a-coreaudio.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcoreaudio_resampler_pic_a_CFLAGS) $(CFLAGS) -c -o libcoreaudio_resampler_pic_a-coreaudio.obj `if test -f 'coreaudio.c'; then $(CYGPATH_W) 'coreaudio.c'; else $(CYGPATH_W) '$(srcdir)/coreaudio.c'; fi`

libcoreaudio_resampler_plugin_a-coreaudio.o: coreaudio.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcoreaudio_resampler_plugin_a_CFLAGS) $(CFLAGS) -MT libcoreaudio_resampler_plugin_a-coreaudio.o -MD -MP -MF "$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.Tpo" \
	  -c -o libcoreaudio_resampler_plugin_a-coreaudio.o `test -f 'coreaudio.c' || echo '$(srcdir)/'`coreaudio.c; \
	then mv -f "$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.Tpo" "$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.Po"; \
	else rm -f "$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.Tpo"; exit 1; \
	fi
#	source='coreaudio.c' object='libcoreaudio_resampler_plugin_a-coreaudio.o' libtool=no \
#	depfile='$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.Po' tmpdepfile='$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcoreaudio_resampler_plugin_a_CFLAGS) $(CFLAGS) -c -o libcoreaudio_resampler_plugin_a-coreaudio.o `test -f 'coreaudio.c' || echo '$(srcdir)/'`coreaudio.c

libcoreaudio_resampler_plugin_a-coreaudio.obj: coreaudio.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcoreaudio_resampler_plugin_a_CFLAGS) $(CFLAGS) -MT libcoreaudio_resampler_plugin_a-coreaudio.obj -MD -MP -MF "$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.Tpo" \
	  -c -o libcoreaudio_resampler_plugin_a-coreaudio.obj `if test -f 'coreaudio.c'; then $(CYGPATH_W) 'coreaudio.c'; else $(CYGPATH_W) '$(srcdir)/coreaudio.c'; fi`; \
	then mv -f "$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.Tpo" "$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.Po"; \
	else rm -f "$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.Tpo"; exit 1; \
	fi
#	source='coreaudio.c' object='libcoreaudio_resampler_plugin_a-coreaudio.obj' libtool=no \
#	depfile='$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.Po' tmpdepfile='$(DEPDIR)/libcoreaudio_resampler_plugin_a-coreaudio.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcoreaudio_resampler_plugin_a_CFLAGS) $(CFLAGS) -c -o libcoreaudio_resampler_plugin_a-coreaudio.obj `if test -f 'coreaudio.c'; then $(CYGPATH_W) 'coreaudio.c'; else $(CYGPATH_W) '$(srcdir)/coreaudio.c'; fi`

liblinear_resampler_a-linear.o: linear.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(liblinear_resampler_a_CFLAGS) $(CFLAGS) -MT liblinear_resampler_a-linear.o -MD -MP -MF "$(DEPDIR)/liblinear_resampler_a-linear.Tpo" \
	  -c -o liblinear_resampler_a-linear.o `test -f 'linear.c' || echo '$(srcdir)/'`linear.c; \
	then mv -f "$(DEPDIR)/liblinear_resampler_a-linear.Tpo" "$(DEPDIR)/liblinear_resampler_a-linear.Po"; \
	else rm -f "$(DEPDIR)/liblinear_resampler_a-linear.Tpo"; exit 1; \
	fi
#	source='linear.c' object='liblinear_resampler_a-linear.o' libtool=no \
#	depfile='$(DEPDIR)/liblinear_resampler_a-linear.Po' tmpdepfile='$(DEPDIR)/liblinear_resampler_a-linear.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(liblinear_resampler_a_CFLAGS) $(CFLAGS) -c -o liblinear_resampler_a-linear.o `test -f 'linear.c' || echo '$(srcdir)/'`linear.c

liblinear_resampler_a-linear.obj: linear.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(liblinear_resampler_a_CFLAGS) $(CFLAGS) -MT liblinear_resampler_a-linear.obj -MD -MP -MF "$(DEPDIR)/liblinear_resampler_a-linear.Tpo" \
	  -c -o liblinear_resampler_a-linear.obj `if test -f 'linear.c'; then $(CYGPATH_W) 'linear.c'; else $(CYGPATH_W) '$(srcdir)/linear.c'; fi`; \
	then mv -f "$(DEPDIR)/liblinear_resampler_a-linear.Tpo" "$(DEPDIR)/liblinear_resampler_a-linear.Po"; \
	else rm -f "$(DEPDIR)/liblinear_resampler_a-linear.Tpo"; exit 1; \
	fi
#	source='linear.c' object='liblinear_resampler_a-linear.obj' libtool=no \
#	depfile='$(DEPDIR)/liblinear_resampler_a-linear.Po' tmpdepfile='$(DEPDIR)/liblinear_resampler_a-linear.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(liblinear_resampler_a_CFLAGS) $(CFLAGS) -c -o liblinear_resampler_a-linear.obj `if test -f 'linear.c'; then $(CYGPATH_W) 'linear.c'; else $(CYGPATH_W) '$(srcdir)/linear.c'; fi`

liblinear_resampler_pic_a-linear.o: linear.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(liblinear_resampler_pic_a_CFLAGS) $(CFLAGS) -MT liblinear_resampler_pic_a-linear.o -MD -MP -MF "$(DEPDIR)/liblinear_resampler_pic_a-linear.Tpo" \
	  -c -o liblinear_resampler_pic_a-linear.o `test -f 'linear.c' || echo '$(srcdir)/'`linear.c; \
	then mv -f "$(DEPDIR)/liblinear_resampler_pic_a-linear.Tpo" "$(DEPDIR)/liblinear_resampler_pic_a-linear.Po"; \
	else rm -f "$(DEPDIR)/liblinear_resampler_pic_a-linear.Tpo"; exit 1; \
	fi
#	source='linear.c' object='liblinear_resampler_pic_a-linear.o' libtool=no \
#	depfile='$(DEPDIR)/liblinear_resampler_pic_a-linear.Po' tmpdepfile='$(DEPDIR)/liblinear_resampler_pic_a-linear.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(liblinear_resampler_pic_a_CFLAGS) $(CFLAGS) -c -o liblinear_resampler_pic_a-linear.o `test -f 'linear.c' || echo '$(srcdir)/'`linear.c

liblinear_resampler_pic_a-linear.obj: linear.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(liblinear_resampler_pic_a_CFLAGS) $(CFLAGS) -MT liblinear_resampler_pic_a-linear.obj -MD -MP -MF "$(DEPDIR)/liblinear_resampler_pic_a-linear.Tpo" \
	  -c -o liblinear_resampler_pic_a-linear.obj `if test -f 'linear.c'; then $(CYGPATH_W) 'linear.c'; else $(CYGPATH_W) '$(srcdir)/linear.c'; fi`; \
	then mv -f "$(DEPDIR)/liblinear_resampler_pic_a-linear.Tpo" "$(DEPDIR)/liblinear_resampler_pic_a-linear.Po"; \
	else rm -f "$(DEPDIR)/liblinear_resampler_pic_a-linear.Tpo"; exit 1; \
	fi
#	source='linear.c' object='liblinear_resampler_pic_a-linear.obj' libtool=no \
#	depfile='$(DEPDIR)/liblinear_resampler_pic_a-linear.Po' tmpdepfile='$(DEPDIR)/liblinear_resampler_pic_a-linear.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(liblinear_resampler_pic_a_CFLAGS) $(CFLAGS) -c -o liblinear_resampler_pic_a-linear.obj `if test -f 'linear.c'; then $(CYGPATH_W) 'linear.c'; else $(CYGPATH_W) '$(srcdir)/linear.c'; fi`

liblinear_resampler_plugin_a-linear.o: linear.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(liblinear_resampler_plugin_a_CFLAGS) $(CFLAGS) -MT liblinear_resampler_plugin_a-linear.o -MD -MP -MF "$(DEPDIR)/liblinear_resampler_plugin_a-linear.Tpo" \
	  -c -o liblinear_resampler_plugin_a-linear.o `test -f 'linear.c' || echo '$(srcdir)/'`linear.c; \
	then mv -f "$(DEPDIR)/liblinear_resampler_plugin_a-linear.Tpo" "$(DEPDIR)/liblinear_resampler_plugin_a-linear.Po"; \
	else rm -f "$(DEPDIR)/liblinear_resampler_plugin_a-linear.Tpo"; exit 1; \
	fi
#	source='linear.c' object='liblinear_resampler_plugin_a-linear.o' libtool=no \
#	depfile='$(DEPDIR)/liblinear_resampler_plugin_a-linear.Po' tmpdepfile='$(DEPDIR)/liblinear_resampler_plugin_a-linear.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(liblinear_resampler_plugin_a_CFLAGS) $(CFLAGS) -c -o liblinear_resampler_plugin_a-linear.o `test -f 'linear.c' || echo '$(srcdir)/'`linear.c

liblinear_resampler_plugin_a-linear.obj: linear.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(liblinear_resampler_plugin_a_CFLAGS) $(CFLAGS) -MT liblinear_resampler_plugin_a-linear.obj -MD -MP -MF "$(DEPDIR)/liblinear_resampler_plugin_a-linear.Tpo" \
	  -c -o liblinear_resampler_plugin_a-linear.obj `if test -f 'linear.c'; then $(CYGPATH_W) 'linear.c'; else $(CYGPATH_W) '$(srcdir)/linear.c'; fi`; \
	then mv -f "$(DEPDIR)/liblinear_resampler_plugin_a-linear.Tpo" "$(DEPDIR)/liblinear_resampler_plugin_a-linear.Po"; \
	else rm -f "$(DEPDIR)/liblinear_resampler_plugin_a-linear.Tpo"; exit 1; \
	fi
#	source='linear.c' object='liblinear_resampler_plugin_a-linear.obj' libtool=no \
#	depfile='$(DEPDIR)/liblinear_resampler_plugin_a-linear.Po' tmpdepfile='$(DEPDIR)/liblinear_resampler_plugin_a-linear.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(liblinear_resampler_plugin_a_CFLAGS) $(CFLAGS) -c -o liblinear_resampler_plugin_a-linear.obj `if test -f 'linear.c'; then $(CYGPATH_W) 'linear.c'; else $(CYGPATH_W) '$(srcdir)/linear.c'; fi`

libtrivial_resampler_a-trivial.o: trivial.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libtrivial_resampler_a_CFLAGS) $(CFLAGS) -MT libtrivial_resampler_a-trivial.o -MD -MP -MF "$(DEPDIR)/libtrivial_resampler_a-trivial.Tpo" \
	  -c -o libtrivial_resampler_a-trivial.o `test -f 'trivial.c' || echo '$(srcdir)/'`trivial.c; \
	then mv -f "$(DEPDIR)/libtrivial_resampler_a-trivial.Tpo" "$(DEPDIR)/libtrivial_resampler_a-trivial.Po"; \
	else rm -f "$(DEPDIR)/libtrivial_resampler_a-trivial.Tpo"; exit 1; \
	fi
#	source='trivial.c' object='libtrivial_resampler_a-trivial.o' libtool=no \
#	depfile='$(DEPDIR)/libtrivial_resampler_a-trivial.Po' tmpdepfile='$(DEPDIR)/libtrivial_resampler_a-trivial.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libtrivial_resampler_a_CFLAGS) $(CFLAGS) -c -o libtrivial_resampler_a-trivial.o `test -f 'trivial.c' || echo '$(srcdir)/'`trivial.c

libtrivial_resampler_a-trivial.obj: trivial.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libtrivial_resampler_a_CFLAGS) $(CFLAGS) -MT libtrivial_resampler_a-trivial.obj -MD -MP -MF "$(DEPDIR)/libtrivial_resampler_a-trivial.Tpo" \
	  -c -o libtrivial_resampler_a-trivial.obj `if test -f 'trivial.c'; then $(CYGPATH_W) 'trivial.c'; else $(CYGPATH_W) '$(srcdir)/trivial.c'; fi`; \
	then mv -f "$(DEPDIR)/libtrivial_resampler_a-trivial.Tpo" "$(DEPDIR)/libtrivial_resampler_a-trivial.Po"; \
	else rm -f "$(DEPDIR)/libtrivial_resampler_a-trivial.Tpo"; exit 1; \
	fi
#	source='trivial.c' object='libtrivial_resampler_a-trivial.obj' libtool=no \
#	depfile='$(DEPDIR)/libtrivial_resampler_a-trivial.Po' tmpdepfile='$(DEPDIR)/libtrivial_resampler_a-trivial.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libtrivial_resampler_a_CFLAGS) $(CFLAGS) -c -o libtrivial_resampler_a-trivial.obj `if test -f 'trivial.c'; then $(CYGPATH_W) 'trivial.c'; else $(CYGPATH_W) '$(srcdir)/trivial.c'; fi`

libtrivial_resampler_pic_a-trivial.o: trivial.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libtrivial_resampler_pic_a_CFLAGS) $(CFLAGS) -MT libtrivial_resampler_pic_a-trivial.o -MD -MP -MF "$(DEPDIR)/libtrivial_resampler_pic_a-trivial.Tpo" \
	  -c -o libtrivial_resampler_pic_a-trivial.o `test -f 'trivial.c' || echo '$(srcdir)/'`trivial.c; \
	then mv -f "$(DEPDIR)/libtrivial_resampler_pic_a-trivial.Tpo" "$(DEPDIR)/libtrivial_resampler_pic_a-trivial.Po"; \
	else rm -f "$(DEPDIR)/libtrivial_resampler_pic_a-trivial.Tpo"; exit 1; \
	fi
#	source='trivial.c' object='libtrivial_resampler_pic_a-trivial.o' libtool=no \
#	depfile='$(DEPDIR)/libtrivial_resampler_pic_a-trivial.Po' tmpdepfile='$(DEPDIR)/libtrivial_resampler_pic_a-trivial.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libtrivial_resampler_pic_a_CFLAGS) $(CFLAGS) -c -o libtrivial_resampler_pic_a-trivial.o `test -f 'trivial.c' || echo '$(srcdir)/'`trivial.c

libtrivial_resampler_pic_a-trivial.obj: trivial.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libtrivial_resampler_pic_a_CFLAGS) $(CFLAGS) -MT libtrivial_resampler_pic_a-trivial.obj -MD -MP -MF "$(DEPDIR)/libtrivial_resampler_pic_a-trivial.Tpo" \
	  -c -o libtrivial_resampler_pic_a-trivial.obj `if test -f 'trivial.c'; then $(CYGPATH_W) 'trivial.c'; else $(CYGPATH_W) '$(srcdir)/trivial.c'; fi`; \
	then mv -f "$(DEPDIR)/libtrivial_resampler_pic_a-trivial.Tpo" "$(DEPDIR)/libtrivial_resampler_pic_a-trivial.Po"; \
	else rm -f "$(DEPDIR)/libtrivial_resampler_pic_a-trivial.Tpo"; exit 1; \
	fi
#	source='trivial.c' object='libtrivial_resampler_pic_a-trivial.obj' libtool=no \
#	depfile='$(DEPDIR)/libtrivial_resampler_pic_a-trivial.Po' tmpdepfile='$(DEPDIR)/libtrivial_resampler_pic_a-trivial.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libtrivial_resampler_pic_a_CFLAGS) $(CFLAGS) -c -o libtrivial_resampler_pic_a-trivial.obj `if test -f 'trivial.c'; then $(CYGPATH_W) 'trivial.c'; else $(CYGPATH_W) '$(srcdir)/trivial.c'; fi`

libtrivial_resampler_plugin_a-trivial.o: trivial.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libtrivial_resampler_plugin_a_CFLAGS) $(CFLAGS) -MT libtrivial_resampler_plugin_a-trivial.o -MD -MP -MF "$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.Tpo" \
	  -c -o libtrivial_resampler_plugin_a-trivial.o `test -f 'trivial.c' || echo '$(srcdir)/'`trivial.c; \
	then mv -f "$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.Tpo" "$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.Po"; \
	else rm -f "$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.Tpo"; exit 1; \
	fi
#	source='trivial.c' object='libtrivial_resampler_plugin_a-trivial.o' libtool=no \
#	depfile='$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.Po' tmpdepfile='$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libtrivial_resampler_plugin_a_CFLAGS) $(CFLAGS) -c -o libtrivial_resampler_plugin_a-trivial.o `test -f 'trivial.c' || echo '$(srcdir)/'`trivial.c

libtrivial_resampler_plugin_a-trivial.obj: trivial.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libtrivial_resampler_plugin_a_CFLAGS) $(CFLAGS) -MT libtrivial_resampler_plugin_a-trivial.obj -MD -MP -MF "$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.Tpo" \
	  -c -o libtrivial_resampler_plugin_a-trivial.obj `if test -f 'trivial.c'; then $(CYGPATH_W) 'trivial.c'; else $(CYGPATH_W) '$(srcdir)/trivial.c'; fi`; \
	then mv -f "$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.Tpo" "$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.Po"; \
	else rm -f "$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.Tpo"; exit 1; \
	fi
#	source='trivial.c' object='libtrivial_resampler_plugin_a-trivial.obj' libtool=no \
#	depfile='$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.Po' tmpdepfile='$(DEPDIR)/libtrivial_resampler_plugin_a-trivial.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libtrivial_resampler_plugin_a_CFLAGS) $(CFLAGS) -c -o libtrivial_resampler_plugin_a-trivial.obj `if test -f 'trivial.c'; then $(CYGPATH_W) 'trivial.c'; else $(CYGPATH_W) '$(srcdir)/trivial.c'; fi`

libugly_resampler_a-ugly.o: ugly.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libugly_resampler_a_CFLAGS) $(CFLAGS) -MT libugly_resampler_a-ugly.o -MD -MP -MF "$(DEPDIR)/libugly_resampler_a-ugly.Tpo" \
	  -c -o libugly_resampler_a-ugly.o `test -f 'ugly.c' || echo '$(srcdir)/'`ugly.c; \
	then mv -f "$(DEPDIR)/libugly_resampler_a-ugly.Tpo" "$(DEPDIR)/libugly_resampler_a-ugly.Po"; \
	else rm -f "$(DEPDIR)/libugly_resampler_a-ugly.Tpo"; exit 1; \
	fi
#	source='ugly.c' object='libugly_resampler_a-ugly.o' libtool=no \
#	depfile='$(DEPDIR)/libugly_resampler_a-ugly.Po' tmpdepfile='$(DEPDIR)/libugly_resampler_a-ugly.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libugly_resampler_a_CFLAGS) $(CFLAGS) -c -o libugly_resampler_a-ugly.o `test -f 'ugly.c' || echo '$(srcdir)/'`ugly.c

libugly_resampler_a-ugly.obj: ugly.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libugly_resampler_a_CFLAGS) $(CFLAGS) -MT libugly_resampler_a-ugly.obj -MD -MP -MF "$(DEPDIR)/libugly_resampler_a-ugly.Tpo" \
	  -c -o libugly_resampler_a-ugly.obj `if test -f 'ugly.c'; then $(CYGPATH_W) 'ugly.c'; else $(CYGPATH_W) '$(srcdir)/ugly.c'; fi`; \
	then mv -f "$(DEPDIR)/libugly_resampler_a-ugly.Tpo" "$(DEPDIR)/libugly_resampler_a-ugly.Po"; \
	else rm -f "$(DEPDIR)/libugly_resampler_a-ugly.Tpo"; exit 1; \
	fi
#	source='ugly.c' object='libugly_resampler_a-ugly.obj' libtool=no \
#	depfile='$(DEPDIR)/libugly_resampler_a-ugly.Po' tmpdepfile='$(DEPDIR)/libugly_resampler_a-ugly.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libugly_resampler_a_CFLAGS) $(CFLAGS) -c -o libugly_resampler_a-ugly.obj `if test -f 'ugly.c'; then $(CYGPATH_W) 'ugly.c'; else $(CYGPATH_W) '$(srcdir)/ugly.c'; fi`

libugly_resampler_pic_a-ugly.o: ugly.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libugly_resampler_pic_a_CFLAGS) $(CFLAGS) -MT libugly_resampler_pic_a-ugly.o -MD -MP -MF "$(DEPDIR)/libugly_resampler_pic_a-ugly.Tpo" \
	  -c -o libugly_resampler_pic_a-ugly.o `test -f 'ugly.c' || echo '$(srcdir)/'`ugly.c; \
	then mv -f "$(DEPDIR)/libugly_resampler_pic_a-ugly.Tpo" "$(DEPDIR)/libugly_resampler_pic_a-ugly.Po"; \
	else rm -f "$(DEPDIR)/libugly_resampler_pic_a-ugly.Tpo"; exit 1; \
	fi
#	source='ugly.c' object='libugly_resampler_pic_a-ugly.o' libtool=no \
#	depfile='$(DEPDIR)/libugly_resampler_pic_a-ugly.Po' tmpdepfile='$(DEPDIR)/libugly_resampler_pic_a-ugly.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libugly_resampler_pic_a_CFLAGS) $(CFLAGS) -c -o libugly_resampler_pic_a-ugly.o `test -f 'ugly.c' || echo '$(srcdir)/'`ugly.c

libugly_resampler_pic_a-ugly.obj: ugly.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libugly_resampler_pic_a_CFLAGS) $(CFLAGS) -MT libugly_resampler_pic_a-ugly.obj -MD -MP -MF "$(DEPDIR)/libugly_resampler_pic_a-ugly.Tpo" \
	  -c -o libugly_resampler_pic_a-ugly.obj `if test -f 'ugly.c'; then $(CYGPATH_W) 'ugly.c'; else $(CYGPATH_W) '$(srcdir)/ugly.c'; fi`; \
	then mv -f "$(DEPDIR)/libugly_resampler_pic_a-ugly.Tpo" "$(DEPDIR)/libugly_resampler_pic_a-ugly.Po"; \
	else rm -f "$(DEPDIR)/libugly_resampler_pic_a-ugly.Tpo"; exit 1; \
	fi
#	source='ugly.c' object='libugly_resampler_pic_a-ugly.obj' libtool=no \
#	depfile='$(DEPDIR)/libugly_resampler_pic_a-ugly.Po' tmpdepfile='$(DEPDIR)/libugly_resampler_pic_a-ugly.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libugly_resampler_pic_a_CFLAGS) $(CFLAGS) -c -o libugly_resampler_pic_a-ugly.obj `if test -f 'ugly.c'; then $(CYGPATH_W) 'ugly.c'; else $(CYGPATH_W) '$(srcdir)/ugly.c'; fi`

libugly_resampler_plugin_a-ugly.o: ugly.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libugly_resampler_plugin_a_CFLAGS) $(CFLAGS) -MT libugly_resampler_plugin_a-ugly.o -MD -MP -MF "$(DEPDIR)/libugly_resampler_plugin_a-ugly.Tpo" \
	  -c -o libugly_resampler_plugin_a-ugly.o `test -f 'ugly.c' || echo '$(srcdir)/'`ugly.c; \
	then mv -f "$(DEPDIR)/libugly_resampler_plugin_a-ugly.Tpo" "$(DEPDIR)/libugly_resampler_plugin_a-ugly.Po"; \
	else rm -f "$(DEPDIR)/libugly_resampler_plugin_a-ugly.Tpo"; exit 1; \
	fi
#	source='ugly.c' object='libugly_resampler_plugin_a-ugly.o' libtool=no \
#	depfile='$(DEPDIR)/libugly_resampler_plugin_a-ugly.Po' tmpdepfile='$(DEPDIR)/libugly_resampler_plugin_a-ugly.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libugly_resampler_plugin_a_CFLAGS) $(CFLAGS) -c -o libugly_resampler_plugin_a-ugly.o `test -f 'ugly.c' || echo '$(srcdir)/'`ugly.c

libugly_resampler_plugin_a-ugly.obj: ugly.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libugly_resampler_plugin_a_CFLAGS) $(CFLAGS) -MT libugly_resampler_plugin_a-ugly.obj -MD -MP -MF "$(DEPDIR)/libugly_resampler_plugin_a-ugly.Tpo" \
	  -c -o libugly_resampler_plugin_a-ugly.obj `if test -f 'ugly.c'; then $(CYGPATH_W) 'ugly.c'; else $(CYGPATH_W) '$(srcdir)/ugly.c'; fi`; \
	then mv -f "$(DEPDIR)/libugly_resampler_plugin_a-ugly.Tpo" "$(DEPDIR)/libugly_resampler_plugin_a-ugly.Po"; \
	else rm -f "$(DEPDIR)/libugly_resampler_plugin_a-ugly.Tpo"; exit 1; \
	fi
#	source='ugly.c' object='libugly_resampler_plugin_a-ugly.obj' libtool=no \
#	depfile='$(DEPDIR)/libugly_resampler_plugin_a-ugly.Po' tmpdepfile='$(DEPDIR)/libugly_resampler_plugin_a-ugly.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libugly_resampler_plugin_a_CFLAGS) $(CFLAGS) -c -o libugly_resampler_plugin_a-ugly.obj `if test -f 'ugly.c'; then $(CYGPATH_W) 'ugly.c'; else $(CYGPATH_W) '$(srcdir)/ugly.c'; fi`
uninstall-info-am:
libbandlimited_resamplerDATA_INSTALL = $(INSTALL_DATA)
install-libbandlimited_resamplerDATA: $(libbandlimited_resampler_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libbandlimited_resamplerdir)
	@list='$(libbandlimited_resampler_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(libbandlimited_resamplerDATA_INSTALL) $$d$$p $(DESTDIR)$(libbandlimited_resamplerdir)/$$f"; \
	  $(libbandlimited_resamplerDATA_INSTALL) $$d$$p $(DESTDIR)$(libbandlimited_resamplerdir)/$$f; \
	done

uninstall-libbandlimited_resamplerDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(libbandlimited_resampler_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(libbandlimited_resamplerdir)/$$f"; \
	  rm -f $(DESTDIR)$(libbandlimited_resamplerdir)/$$f; \
	done
libcoreaudio_resamplerDATA_INSTALL = $(INSTALL_DATA)
install-libcoreaudio_resamplerDATA: $(libcoreaudio_resampler_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libcoreaudio_resamplerdir)
	@list='$(libcoreaudio_resampler_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(libcoreaudio_resamplerDATA_INSTALL) $$d$$p $(DESTDIR)$(libcoreaudio_resamplerdir)/$$f"; \
	  $(libcoreaudio_resamplerDATA_INSTALL) $$d$$p $(DESTDIR)$(libcoreaudio_resamplerdir)/$$f; \
	done

uninstall-libcoreaudio_resamplerDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(libcoreaudio_resampler_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(libcoreaudio_resamplerdir)/$$f"; \
	  rm -f $(DESTDIR)$(libcoreaudio_resamplerdir)/$$f; \
	done
liblinear_resamplerDATA_INSTALL = $(INSTALL_DATA)
install-liblinear_resamplerDATA: $(liblinear_resampler_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(liblinear_resamplerdir)
	@list='$(liblinear_resampler_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(liblinear_resamplerDATA_INSTALL) $$d$$p $(DESTDIR)$(liblinear_resamplerdir)/$$f"; \
	  $(liblinear_resamplerDATA_INSTALL) $$d$$p $(DESTDIR)$(liblinear_resamplerdir)/$$f; \
	done

uninstall-liblinear_resamplerDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(liblinear_resampler_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(liblinear_resamplerdir)/$$f"; \
	  rm -f $(DESTDIR)$(liblinear_resamplerdir)/$$f; \
	done
libtrivial_resamplerDATA_INSTALL = $(INSTALL_DATA)
install-libtrivial_resamplerDATA: $(libtrivial_resampler_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libtrivial_resamplerdir)
	@list='$(libtrivial_resampler_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(libtrivial_resamplerDATA_INSTALL) $$d$$p $(DESTDIR)$(libtrivial_resamplerdir)/$$f"; \
	  $(libtrivial_resamplerDATA_INSTALL) $$d$$p $(DESTDIR)$(libtrivial_resamplerdir)/$$f; \
	done

uninstall-libtrivial_resamplerDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(libtrivial_resampler_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(libtrivial_resamplerdir)/$$f"; \
	  rm -f $(DESTDIR)$(libtrivial_resamplerdir)/$$f; \
	done
libugly_resamplerDATA_INSTALL = $(INSTALL_DATA)
install-libugly_resamplerDATA: $(libugly_resampler_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libugly_resamplerdir)
	@list='$(libugly_resampler_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(libugly_resamplerDATA_INSTALL) $$d$$p $(DESTDIR)$(libugly_resamplerdir)/$$f"; \
	  $(libugly_resamplerDATA_INSTALL) $$d$$p $(DESTDIR)$(libugly_resamplerdir)/$$f; \
	done

uninstall-libugly_resamplerDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(libugly_resampler_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(libugly_resamplerdir)/$$f"; \
	  rm -f $(DESTDIR)$(libugly_resamplerdir)/$$f; \
	done

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if (etags --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	else \
	  include_option=--include; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -f $$subdir/TAGS && \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ../../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d $(distdir)/$$subdir \
	    || mkdir $(distdir)/$$subdir \
	    || exit 1; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$(top_distdir)" \
	        distdir=../$(distdir)/$$subdir \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-recursive
all-am: Makefile $(LIBRARIES) $(DATA) $(HEADERS)
installdirs: installdirs-recursive
installdirs-am:
	$(mkinstalldirs) $(DESTDIR)$(libvlcdir) $(DESTDIR)$(libbandlimited_resamplerdir) $(DESTDIR)$(libcoreaudio_resamplerdir) $(DESTDIR)$(liblinear_resamplerdir) $(DESTDIR)$(libtrivial_resamplerdir) $(DESTDIR)$(libugly_resamplerdir)

install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-recursive

clean-am: clean-generic clean-libvlcLIBRARIES clean-local \
	clean-noinstLIBRARIES mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

info: info-recursive

info-am:

install-data-am: install-libbandlimited_resamplerDATA \
	install-libcoreaudio_resamplerDATA \
	install-liblinear_resamplerDATA \
	install-libtrivial_resamplerDATA install-libugly_resamplerDATA \
	install-libvlcLIBRARIES

install-exec-am:

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-info-am uninstall-libbandlimited_resamplerDATA \
	uninstall-libcoreaudio_resamplerDATA \
	uninstall-liblinear_resamplerDATA \
	uninstall-libtrivial_resamplerDATA \
	uninstall-libugly_resamplerDATA uninstall-libvlcLIBRARIES

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am check check-am clean \
	clean-generic clean-libvlcLIBRARIES clean-local \
	clean-noinstLIBRARIES clean-recursive ctags ctags-recursive \
	distclean distclean-compile distclean-generic \
	distclean-recursive distclean-tags distdir dvi dvi-am \
	dvi-recursive info info-am info-recursive install install-am \
	install-data install-data-am install-data-recursive \
	install-exec install-exec-am install-exec-recursive \
	install-info install-info-am install-info-recursive \
	install-libbandlimited_resamplerDATA \
	install-libcoreaudio_resamplerDATA \
	install-liblinear_resamplerDATA \
	install-libtrivial_resamplerDATA install-libugly_resamplerDATA \
	install-libvlcLIBRARIES install-man install-recursive \
	install-strip installcheck installcheck-am installdirs \
	installdirs-am installdirs-recursive maintainer-clean \
	maintainer-clean-generic maintainer-clean-recursive mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-recursive \
	pdf pdf-am pdf-recursive ps ps-am ps-recursive tags \
	tags-recursive uninstall uninstall-am uninstall-info-am \
	uninstall-info-recursive uninstall-libbandlimited_resamplerDATA \
	uninstall-libcoreaudio_resamplerDATA \
	uninstall-liblinear_resamplerDATA \
	uninstall-libtrivial_resamplerDATA \
	uninstall-libugly_resamplerDATA uninstall-libvlcLIBRARIES \
	uninstall-recursive


clean-local:
	-rm -f *.a *.so *.dll *.sl *.dylib

all: all-modules
all-modules:
	@set fnord $$MAKEFLAGS; amf=$$2; targets=`\
	if test "$(plugin)" != "no"; then z=$$($(VLC_CONFIG) --target plugin); for mod in trivial_resampler ugly_resampler linear_resampler bandlimited_resampler coreaudio_resampler; do case "$$z" in */lib$${mod}_plugin*) echo lib$${mod}_plugin$(LIBEXT);; esac; done; fi; \
	if test "$(builtin)" != "no"; then z=$$($(VLC_CONFIG) --target builtin); for mod in trivial_resampler ugly_resampler linear_resampler bandlimited_resampler coreaudio_resampler; do case "$$z" in */lib$${mod}.a*) echo lib$${mod}.a;; esac; done; fi; \
	if test "$(pic)" != "no"; then z=$$($(VLC_CONFIG) --target builtin pic); for mod in trivial_resampler ugly_resampler linear_resampler bandlimited_resampler coreaudio_resampler; do case "$$z" in */lib$${mod}_pic.a*) echo lib$${mod}_pic.a;; esac; done; fi; \
	`; case "$$targets" in *lib*) $(MAKE) $(AM_MAKEFLAGS) $$targets || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; ;; esac; \
	test -z "$$fail"
libtrivial_resampler_plugin$(LIBEXT): $(libtrivial_resampler_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage trivial_resampler` in \
	  c++) echo $(CXXLINK) $(libtrivial_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin trivial_resampler\` ; $(CXXLINK) $(libtrivial_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin trivial_resampler` ;; \
	  objc) echo $(OBJCLINK) $(libtrivial_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin trivial_resampler\` ; $(OBJCLINK) $(libtrivial_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin trivial_resampler` ;; \
	  c|*) echo $(LINK) $(libtrivial_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin trivial_resampler\` ; $(LINK) $(libtrivial_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin trivial_resampler` ;; \
	esac
libugly_resampler_plugin$(LIBEXT): $(libugly_resampler_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage ugly_resampler` in \
	  c++) echo $(CXXLINK) $(libugly_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin ugly_resampler\` ; $(CXXLINK) $(libugly_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin ugly_resampler` ;; \
	  objc) echo $(OBJCLINK) $(libugly_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin ugly_resampler\` ; $(OBJCLINK) $(libugly_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin ugly_resampler` ;; \
	  c|*) echo $(LINK) $(libugly_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin ugly_resampler\` ; $(LINK) $(libugly_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin ugly_resampler` ;; \
	esac
liblinear_resampler_plugin$(LIBEXT): $(liblinear_resampler_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage linear_resampler` in \
	  c++) echo $(CXXLINK) $(liblinear_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin linear_resampler\` ; $(CXXLINK) $(liblinear_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin linear_resampler` ;; \
	  objc) echo $(OBJCLINK) $(liblinear_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin linear_resampler\` ; $(OBJCLINK) $(liblinear_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin linear_resampler` ;; \
	  c|*) echo $(LINK) $(liblinear_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin linear_resampler\` ; $(LINK) $(liblinear_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin linear_resampler` ;; \
	esac
libbandlimited_resampler_plugin$(LIBEXT): $(libbandlimited_resampler_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage bandlimited_resampler` in \
	  c++) echo $(CXXLINK) $(libbandlimited_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin bandlimited_resampler\` ; $(CXXLINK) $(libbandlimited_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin bandlimited_resampler` ;; \
	  objc) echo $(OBJCLINK) $(libbandlimited_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin bandlimited_resampler\` ; $(OBJCLINK) $(libbandlimited_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin bandlimited_resampler` ;; \
	  c|*) echo $(LINK) $(libbandlimited_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin bandlimited_resampler\` ; $(LINK) $(libbandlimited_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin bandlimited_resampler` ;; \
	esac
libcoreaudio_resampler_plugin$(LIBEXT): $(libcoreaudio_resampler_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage coreaudio_resampler` in \
	  c++) echo $(CXXLINK) $(libcoreaudio_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin coreaudio_resampler\` ; $(CXXLINK) $(libcoreaudio_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin coreaudio_resampler` ;; \
	  objc) echo $(OBJCLINK) $(libcoreaudio_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin coreaudio_resampler\` ; $(OBJCLINK) $(libcoreaudio_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin coreaudio_resampler` ;; \
	  c|*) echo $(LINK) $(libcoreaudio_resampler_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin coreaudio_resampler\` ; $(LINK) $(libcoreaudio_resampler_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin coreaudio_resampler` ;; \
	esac
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
